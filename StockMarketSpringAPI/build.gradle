plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'StockMarketSpringAPI'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'
    implementation 'io.swagger.core.v3:swagger-models:2.2.21'
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'org.modelmapper:modelmapper:2.3.8'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs += ["-XX:+EnableDynamicAgentLoading"]
    finalizedBy jacocoTestReport
    jacoco {
        includes = ['com.example.*']
    }
}
jacoco {
    toolVersion = '0.8.12'
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true   // Sonar needs XML
        html.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "dido1043_Stock-Market-Spring"
        property "sonar.organization", "dido1043"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}